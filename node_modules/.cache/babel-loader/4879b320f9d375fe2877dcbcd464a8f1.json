{"ast":null,"code":"var _jsxFileName = \"F:\\\\Prasad\\\\DEV\\\\myProjects\\\\dashboardCRUD\\\\src\\\\Pages\\\\Authentication\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport classes from './Login.module.css';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport firebase from '../../firebase';\nimport LoadingSpinner from '../../components/UI/LoadingSpinner';\nimport { useDispatch } from 'react-redux';\nimport { authActions } from '../../store/auth-slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LogIn = () => {\n  _s();\n\n  const [enteredEmail, setEnteredEmail] = useState('pn@test.com');\n  const [enteredPass, setEnteredPass] = useState('12345678');\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const onAddEmail = evt => {\n    setEnteredEmail(evt.target.value);\n  };\n\n  const onAddPass = evt => {\n    setEnteredPass(evt.target.value);\n  };\n\n  const otherLogin = argProvider => {\n    var provider;\n\n    switch (argProvider) {\n      case 'Google':\n        provider = new firebase.auth.GoogleAuthProvider();\n        break;\n    }\n\n    return firebase.auth().signInWithPopup(provider).then(result => {\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken;\n      console.log(token);\n      var user = result.user;\n      return user;\n    }).then(res => {\n      alert('Log In successfully!');\n      dispatch(authActions.setUserData({\n        userId: enteredEmail,\n        isLogIn: true\n      }));\n      history.push('/dashboard');\n    }).catch(error => {\n      alert(error);\n    });\n  };\n\n  const submitHandler = evt => {\n    evt.preventDefault();\n    setIsLoading(true);\n    fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCEuKukNRynt7pmOA1UybJ2M1jN2iUShzg', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPass,\n        returnSecureToken: true\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        setIsLoading(false); // alert('Log In successfully!');\n\n        dispatch(authActions.setUserData({\n          userId: enteredEmail,\n          isLogIn: true\n        }));\n        history.push('/dashboard');\n      } else {\n        return res.json().then(data => {\n          setIsLoading(false);\n          alert(data.error.message);\n        });\n      }\n    });\n  };\n\n  const onSignUp = () => {\n    history.push('/register');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [!isLoading && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LOG IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 28\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          onChange: onAddEmail,\n          value: enteredEmail,\n          required: true,\n          placeholder: \"Enter Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          onChange: onAddPass,\n          value: enteredPass,\n          required: true,\n          placeholder: \"Enter Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: onSignUp,\n          children: \"Create new account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 28\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.logo,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: otherLogin.bind(null, 'Google'),\n        children: \"Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 28\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LogIn, \"j+I8JucoSDlh+E/T4cPu8mV1xr8=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c = LogIn;\nexport default LogIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogIn\");","map":{"version":3,"sources":["F:/Prasad/DEV/myProjects/dashboardCRUD/src/Pages/Authentication/Login.js"],"names":["classes","useState","useHistory","firebase","LoadingSpinner","useDispatch","authActions","LogIn","enteredEmail","setEnteredEmail","enteredPass","setEnteredPass","isLoading","setIsLoading","history","dispatch","onAddEmail","evt","target","value","onAddPass","otherLogin","argProvider","provider","auth","GoogleAuthProvider","signInWithPopup","then","result","credential","token","accessToken","console","log","user","res","alert","setUserData","userId","isLogIn","push","catch","error","submitHandler","preventDefault","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","ok","json","data","message","onSignUp","form","control","actions","toggle","logo","bind"],"mappings":"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","sourcesContent":["import classes from './Login.module.css';\r\nimport { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport firebase from '../../firebase';\r\nimport LoadingSpinner from '../../components/UI/LoadingSpinner';\r\nimport { useDispatch } from 'react-redux';\r\nimport {authActions} from '../../store/auth-slice';\r\n\r\nconst LogIn = () => {\r\n    const [enteredEmail, setEnteredEmail] = useState('pn@test.com');\r\n    const [enteredPass, setEnteredPass] = useState('12345678');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const onAddEmail = (evt) => {\r\n        setEnteredEmail(evt.target.value);\r\n    }\r\n\r\n    const onAddPass = (evt) => {\r\n        setEnteredPass(evt.target.value);\r\n    }\r\n\r\n    const otherLogin = (argProvider) => {\r\n        var provider;\r\n        switch (argProvider) {\r\n            case 'Google':\r\n                provider = new firebase.auth.GoogleAuthProvider();\r\n                break;\r\n        }\r\n\r\n        return firebase.auth().signInWithPopup(provider).then((result) => {\r\n            var credential = result.credential;\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            var token = credential.accessToken;\r\n            console.log(token);\r\n            var user = result.user;\r\n            return user;\r\n\r\n        }).then((res) => {\r\n            alert('Log In successfully!');\r\n            dispatch(authActions.setUserData({\r\n                userId: enteredEmail,\r\n                isLogIn: true\r\n            }));\r\n            history.push('/dashboard');\r\n        }).catch((error) => {\r\n            alert(error)\r\n        });\r\n    }\r\n\r\n    const submitHandler = (evt) => {\r\n        evt.preventDefault();\r\n        setIsLoading(true);\r\n        fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCEuKukNRynt7pmOA1UybJ2M1jN2iUShzg',\r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    email: enteredEmail,\r\n                    password: enteredPass,\r\n                    returnSecureToken: true\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        ).then(res => {\r\n            if (res.ok) {\r\n                setIsLoading(false);\r\n                // alert('Log In successfully!');\r\n                dispatch(authActions.setUserData({\r\n                    userId: enteredEmail,\r\n                    isLogIn: true\r\n                }));               \r\n                history.push('/dashboard');\r\n            } else {\r\n                return res.json().then(data => {\r\n                    setIsLoading(false);\r\n                    alert(data.error.message);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const onSignUp = () => {\r\n        history.push('/register');\r\n    }\r\n\r\n    return (\r\n        <section className={classes.auth}>\r\n            {!isLoading && <h2 >LOG IN</h2>}\r\n            {!isLoading && <form onSubmit={submitHandler} className={classes.form}>\r\n                <div className={classes.control}>\r\n                    <input type='email' id='email' onChange={onAddEmail} value={enteredEmail} required placeholder=\"Enter Email\" />\r\n                </div>\r\n                <div className={classes.control}>\r\n                    <input type='password' id='password' onChange={onAddPass} value={enteredPass} required placeholder=\"Enter Password\" />\r\n                </div>\r\n                <div className={classes.actions}>\r\n                    <button >Submit</button>\r\n                    <button\r\n                        type='button'\r\n                        className={classes.toggle}\r\n                        onClick={onSignUp}>\r\n                        Create new account\r\n                    </button>\r\n                </div>\r\n            </form>}\r\n            {!isLoading && <div className={classes.logo}>\r\n                <button onClick={otherLogin.bind(null, 'Google')}>Google</button>\r\n            </div>}\r\n\r\n            {/* <button onClick={otherLogin.bind(null, 'Facebook')}>Facebook</button> */}\r\n            {isLoading && <LoadingSpinner />}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default LogIn;"]},"metadata":{},"sourceType":"module"}